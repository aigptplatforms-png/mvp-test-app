name: MVP CI/CD

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: eu-central-1
  ECR_REPO: ${{ secrets.ECR_REPO }}   # set in repo secrets: full url without tag (e.g. <acct>.dkr.ecr.eu-central-1.amazonaws.com/mvp-service)

jobs:
  quality_and_build:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.ecr-image.outputs.image }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with: 
        python-version: '3.11'

    - name: Install linters
      run: |
        python -m pip install --upgrade pip
        pip install flake8 bandit

    - name: Run flake8
      run: flake8 app || true   # don't fail pipeline on style if you want; remove || true to fail

    - name: Run bandit (security scan)
      run: bandit -r app -f json -o bandit-output.json || true

    - name: Build Docker image
      run: |
        IMAGE="${{ env.ECR_REPO }}:${{ github.sha }}"
        echo "IMAGE=$IMAGE" >> $GITHUB_OUTPUT
        docker build -t "$IMAGE" .
    - name: Install Trivy
      uses: aquasecurity/trivy-action@0.24.0
      with:
        image-ref: ${{ env.ECR_REPO }}:${{ github.sha }}
        format: 'table'
        exit-code: '1'   # fail if vulnerability severity > HIGH
        severity: CRITICAL       # restrict failure threshold to CRITICAL only
        scan-type: 'image'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: ECR Login and Push
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPO }}
        IMAGE="${{ env.ECR_REPO }}:${{ github.sha }}"
        docker tag "${{ env.ECR_REPO }}:${{ github.sha }}" "$IMAGE" || true
        docker push "$IMAGE"
      id: ecr-image

  deploy_and_test:
    needs: quality_and_build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Upload repo to EC2
      uses: appleboy/scp-action@v0.1.6
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "."
        target: "/home/ubuntu/mvp-repo"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Run deploy script on EC2
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        # forward AWS env vars to the remote EC2 session
        envs: AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION
        script: |
          # install AWS CLI if not present
          if ! command -v aws &> /dev/null; then
            echo "[INFO] Installing AWS CLI..."
            sudo apt-get update -y
            sudo apt-get install -y awscli
          fi
    
          # run your deploy script
          sudo bash /home/ubuntu/mvp-repo/ci/deploy.sh "${{ env.ECR_REPO }}:${{ github.sha }}" "app.${{ secrets.EC2_PUBLIC_IP }}.nip.io"

    - name: Wait for app
      run: |
        HOST="http://app.${{ secrets.EC2_PUBLIC_IP }}.nip.io"
        for i in {1..24}; do
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" $HOST || true)
          echo "status=$STATUS"
          if [ "$STATUS" = "200" ]; then echo "up"; exit 0; fi
          sleep 5
        done
        echo "app not up"; exit 1

    - name: Run API tests (pytest)
      run: |
        pip install -r app/requirements.txt
        pip install pytest requests
        pytest qa/api_tests/test_api.py --junitxml=api-report.xml
      continue-on-error: false

    - name: Run Playwright UI tests
      uses: microsoft/playwright-github-action@v1
      with:
        run: |
          cd qa/ui_tests/playwright
          npm ci
          npx playwright install --with-deps
          BASE_URL="http://app.${{ secrets.EC2_PUBLIC_IP }}.nip.io" npx playwright test --reporter=dot,junit

    - name: Upload reports to S3
      uses: jakejarvis/s3-sync-action@v0.5.1
      with:
        args: --acl private --delete
      env:
        AWS_S3_BUCKET: ${{ secrets.S3_BUCKET }}
        AWS_REGION: ${{ env.AWS_REGION }}
